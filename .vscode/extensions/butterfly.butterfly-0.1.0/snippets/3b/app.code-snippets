{
    "CRUD app.js":{
        "prefix": "^appV2",
        "body":["const express = require('express');",
        "const mongoose = require('mongoose');",
        "const Document = require('./models/model'); // Assuming the model is defined in a separate file",
        "",
        "// Connect to MongoDB",
        "mongoose.connect('mongodb://localhost:27017/db1', {",
        "  useNewUrlParser: true,",
        "  useUnifiedTopology: true,",
        "})",
        "  .then(() => {",
        "    console.log('Connected to MongoDB');",
        "  })",
        "  .catch((error) => {",
        "    console.error('Failed to connect to MongoDB:', error);",
        "  });",
        "",
        "// Create Express app",
        "const app = express();",
        "",
        "// Middleware",
        "app.use(express.json());",
        "",
        "// Routes",
        "app.get(\"/\", (req, res)=>{",
        "    res.send(\"This is Home Page of Books\")",
        "})",
        "",
        "",
        "// Create a new document",
        "app.post('/books', async (req, res) => {",
        "  try {",
        "    const documentData = req.body;",
        "    const createdDocument = await Document.create(documentData);",
        "    res.status(201).json(createdDocument);",
        "  } catch (error) {",
        "    res.status(500).json({ error: 'Failed to create document' });",
        "  }",
        "});",
        "",
        "// Read all documents",
        "app.get('/books', async (req, res) => {",
        "  try {",
        "    const documents = await Document.find();",
        "    res.json(documents);",
        "  } catch (error) {",
        "    res.status(500).json({ error: 'Failed to retrieve documents' });",
        "  }",
        "});",
        "",
        "// Read a specific document by ID",
        "app.get('/books/:id', async (req, res) => {",
        "  try {",
        "    const document = await Document.findById(req.params.id);",
        "    if (!document) {",
        "      return res.status(404).json({ error: 'Document not found' });",
        "    }",
        "    res.json(document);",
        "  } catch (error) {",
        "    res.status(500).json({ error: 'Failed to retrieve document' });",
        "  }",
        "});",
        "",
        "// Update a document by ID",
        "app.put('/books/:id', async (req, res) => {",
        "  try {",
        "    const updatedDocument = await Document.findByIdAndUpdate(",
        "      req.params.id,",
        "      req.body,",
        "      { new: true }",
        "    );",
        "    if (!updatedDocument) {",
        "      return res.status(404).json({ error: 'Document not found' });",
        "    }",
        "    res.json(updatedDocument);",
        "  } catch (error) {",
        "    res.status(500).json({ error: 'Failed to update document' });",
        "  }",
        "});",
        "",
        "// Delete a document by ID",
        "app.delete('/books/:id', async (req, res) => {",
        "  try {",
        "    const deletedDocument = await Document.findByIdAndDelete(req.params.id);",
        "    if (!deletedDocument) {",
        "      return res.status(404).json({ error: 'Document not found' });",
        "    }",
        "    res.json({ message: 'Document deleted successfully' });",
        "  } catch (error) {",
        "    res.status(500).json({ error: 'Failed to delete document' });",
        "  }",
        "});",
        "",
        "// Start the server",
        "const port = 3000;",
        "app.listen(port, () => {",
        "  console.log(`Server is running on port ${port}`);",
        "});",
        ],
        "description": "app.js code"
    }
}